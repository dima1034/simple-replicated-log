// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: proto/log-service.proto

package log_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LogService_AppendMessage_FullMethodName       = "/log.LogService/AppendMessage"
	LogService_GetLastMessageID_FullMethodName    = "/log.LogService/GetLastMessageID"
	LogService_BatchAppendMessages_FullMethodName = "/log.LogService/BatchAppendMessages"
	LogService_RestartServer_FullMethodName       = "/log.LogService/RestartServer"
)

// LogServiceClient is the client API for LogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogServiceClient interface {
	// RPC to append a single message.
	AppendMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageReply, error)
	// RPC to retrieve the ID of the last message received by the secondary.
	GetLastMessageID(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LastMessageIDReply, error)
	// RPC to replicate a batch of missed messages to the secondary.
	BatchAppendMessages(ctx context.Context, in *BatchMessageRequest, opts ...grpc.CallOption) (*MessageReply, error)
	// RPC method to request a server restart
	RestartServer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MessageReply, error)
}

type logServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogServiceClient(cc grpc.ClientConnInterface) LogServiceClient {
	return &logServiceClient{cc}
}

func (c *logServiceClient) AppendMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageReply, error) {
	out := new(MessageReply)
	err := c.cc.Invoke(ctx, LogService_AppendMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) GetLastMessageID(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LastMessageIDReply, error) {
	out := new(LastMessageIDReply)
	err := c.cc.Invoke(ctx, LogService_GetLastMessageID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) BatchAppendMessages(ctx context.Context, in *BatchMessageRequest, opts ...grpc.CallOption) (*MessageReply, error) {
	out := new(MessageReply)
	err := c.cc.Invoke(ctx, LogService_BatchAppendMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) RestartServer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MessageReply, error) {
	out := new(MessageReply)
	err := c.cc.Invoke(ctx, LogService_RestartServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogServiceServer is the server API for LogService service.
// All implementations must embed UnimplementedLogServiceServer
// for forward compatibility
type LogServiceServer interface {
	// RPC to append a single message.
	AppendMessage(context.Context, *MessageRequest) (*MessageReply, error)
	// RPC to retrieve the ID of the last message received by the secondary.
	GetLastMessageID(context.Context, *Empty) (*LastMessageIDReply, error)
	// RPC to replicate a batch of missed messages to the secondary.
	BatchAppendMessages(context.Context, *BatchMessageRequest) (*MessageReply, error)
	// RPC method to request a server restart
	RestartServer(context.Context, *Empty) (*MessageReply, error)
	mustEmbedUnimplementedLogServiceServer()
}

// UnimplementedLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogServiceServer struct {
}

func (UnimplementedLogServiceServer) AppendMessage(context.Context, *MessageRequest) (*MessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendMessage not implemented")
}
func (UnimplementedLogServiceServer) GetLastMessageID(context.Context, *Empty) (*LastMessageIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastMessageID not implemented")
}
func (UnimplementedLogServiceServer) BatchAppendMessages(context.Context, *BatchMessageRequest) (*MessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchAppendMessages not implemented")
}
func (UnimplementedLogServiceServer) RestartServer(context.Context, *Empty) (*MessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartServer not implemented")
}
func (UnimplementedLogServiceServer) mustEmbedUnimplementedLogServiceServer() {}

// UnsafeLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogServiceServer will
// result in compilation errors.
type UnsafeLogServiceServer interface {
	mustEmbedUnimplementedLogServiceServer()
}

func RegisterLogServiceServer(s grpc.ServiceRegistrar, srv LogServiceServer) {
	s.RegisterService(&LogService_ServiceDesc, srv)
}

func _LogService_AppendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).AppendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogService_AppendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).AppendMessage(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_GetLastMessageID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).GetLastMessageID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogService_GetLastMessageID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).GetLastMessageID(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_BatchAppendMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).BatchAppendMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogService_BatchAppendMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).BatchAppendMessages(ctx, req.(*BatchMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_RestartServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).RestartServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogService_RestartServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).RestartServer(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// LogService_ServiceDesc is the grpc.ServiceDesc for LogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "log.LogService",
	HandlerType: (*LogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppendMessage",
			Handler:    _LogService_AppendMessage_Handler,
		},
		{
			MethodName: "GetLastMessageID",
			Handler:    _LogService_GetLastMessageID_Handler,
		},
		{
			MethodName: "BatchAppendMessages",
			Handler:    _LogService_BatchAppendMessages_Handler,
		},
		{
			MethodName: "RestartServer",
			Handler:    _LogService_RestartServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/log-service.proto",
}
